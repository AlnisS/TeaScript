FDEF(init())
  
EFDEF()
FDEF(main())
  #PRINT(15, test())
  #PRINT(16, test()+test())
  #PRINT(17, printalias(1234))
  #PRINT(18, addtest(1, 2))
  #PRINT(19, 2 * 3 ** 4 * 2)
  #PRINT(20, (0-11) % 3)
  #PRINT(21, (0-11) %% 3)
  
  #PRINT(22, true ^ true)
  #PRINT(23, true ^ false)
  #PRINT(24, false ^ true)
  #PRINT(25, false ^ false)
  
  U(1,      abs(-1))
  U(1,      ceil(.1))
  U(1,      floor(1.9))
  U(3,      floordiv(7,2))
  U(4,      max(3, 4))
  U(3,      min(4, 3))
  U(7.389,  exp(2))
  U(2,      log(exp(2)))
  U(3,      log10(1000))
  U(16,     pow(2, 4))
  U(8,      sqrt(64))
  U(.5,     sin(3.14159*5/6))
  U(-.5,    cos(3.14159*4/6))
  U(1,      tan(3.14159*.25))
  U(0.5236, asin(1/2))
  U(1.0472, acos(1/2))
  U(0.7854, atan(1))
  U(-.7854, atan2(0-2, 2))
  U(1.1752, sinh(1))
  U(1.5431, cosh(1))
  U(0.7616, tanh(1))
  U(135,    todeg(3.14159*.75))
  U(1.0472, torad(60))
  U(36,     sq(6))
  U(true,   !false)
  U(true,   !  (  1 > 3 ||  4  < 3)  )
  U(34,     fib(9))
  U(8,      fib(6))
  U(34,     fib(fib(6)+1))
  
  U(120,    factorial(5))
  U(34,     gcd(102, 68))
  U(128,    weirdmul(8, 16))
  U(28,     binomial(8, 2))
  U(35,     binomial(7, 3))
  U(16,     square(4))
  U(144,    square(12))
  U(8,      cube(2))
  U(125,    cube(5))
EFDEF()

FDEF(square())
  BRANCH(a1 == 0, square.s)
    RET(square(a1-1) + 2 * a1 - 1)
  LABEL(square.s)
    RET(0)
EFDEF()

FDEF(cube())
  BRANCH(a1 == 0, cube.s)
    RET(cube(a1 - 1) + 3 * square(a1) - 3 * a1 + 1)
  LABEL(cube.s)
    RET(0)
EFDEF()

FDEF(binomial())
  BRANCH(a2 == 0, binomial.a)
  BRANCH(a1 == 0, binomial.b)
    RET(binomial(a1-1, a2) + binomial(a1-1, a2-1))
  LABEL(binomial.a)
    RET(1)
  LABEL(binomial.b)
    RET(0)
EFDEF()

FDEF(gcd())
  BRANCH(a2 == 0, gcd.simple)
    RET(gcd(a2, a1 % a2))
  LABEL(gcd.simple)
    RET(a1)
EFDEF()

FDEF(weirdmul())
  BRANCH(a2 == 0, weridmul.a)
  BRANCH(a2 % 2 == 0, weirdmul.b)
    RET(weirdmul(a1 + a1, floordiv(a2, 2)) + a1)
  LABEL(weridmul.a)
    RET(0)
  LABEL(weirdmul.b)
    RET(weirdmul(a1 + a1, floordiv(a2, 2)))
EFDEF()

FDEF(factorial())
  BRANCH(a1 == 1, factorial.easy)
    RET(a1 * factorial(a1 - 1))
  LABEL(factorial.easy)
    RET(1)
EFDEF()

FDEF(addtest())
  RET(a1+a2)
EFDEF()

FDEF(fib())
  BRANCH(a1 <= 1, fib.simple)
    RET(fib(a1-1) + fib(a1-2))
  LABEL(fib.simple)
    RET(a1)
EFDEF()

FDEF(printalias())
  RET(a1)
EFDEF()

FDEF(test())
  RET(2.5)
EFDEF()