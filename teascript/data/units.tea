#to run tests (warning: will erase everything in output folder!):
#/path/to/processing-java --sketch="path/to/folder/called/teascript/" --output="/some/folder/without/important/stuff" --force --run
#/home/chrx/Programs/processing-3.3.7/processing-java --sketch="/home/chrx/sketchbook/projects/TeaScript/teascript/" --output="/tmp/tmps" --force --run

FDEF(init())
  
EFDEF()
FDEF(main())
  U(true,   (  (  true   )  )  )
  U(false,  (  (  false  )  )  )
  U(true,   true || true)
  U(true,   true || false)
  U(true,   false|| true)
  U(false,  false|| false)
  U(true,   true && true)
  U(false,  true && false)
  U(false,  false&& true)
  U(false,  false&&false)
  U(true,   false && true || true && true)
  U(false,  (true || false) && !(false && true) && !true)
  U(false,  !( true && true && false || false && true || ( false || !false ) ) )
  U(true,   true || (false || !false))
  U(true,   !false != !true)
  U(false,  false != !true)
  
  U(false,  true ^ true)
  U(true,   true ^ false)
  U(true,   false^ true)
  U(false,  false^ false)
  U(false,  !( true && true && false || false && true || ( false || !false ) ) ^ (true || false) && !(false && true) && !true)
  U(true,   true || (false || !false) ^ false && true || true && true)
  
  U(true,   3 > 2)
  U(false,  2 > 2)
  U(false,  1 > 2)
  U(true,   1 < 2)
  U(false,  2 < 2)
  U(false,  3 < 2)
  U(true,   3 >= 2)
  U(true,   2 >= 2)
  U(false,  1 >= 2)
  U(true,   1 <= 2)
  U(true,   2 <= 2)
  U(false,  3 <= 2)
  
  #string functions not yet implemented
  U(true, 1 == 1)
  U(true,  1.0 == 1.0)
  U(true, true == true)
  U(true, false == false)
  #U(true, "zork" == "zork")
  U(false, 1 == 0)
  U(false,  1.0 == 0.0)
  U(false, true == false)
  U(false, false == true)
  #U(false, "zork" == "bork")
  
  U(false, 1 != 1)
  U(false,  1.0 != 1.0)
  U(false, true != true)
  U(false, false != false)
  #U(false, "zork" != "zork")
  U(true, 1 != 0)
  U(true,  1.0 != 0.0)
  U(true, true != false)
  U(true, false != true)
  #U(true, "zork" != "bork")
  
  U(7, 4 - -3 * (4 - 2*(6 - 3)) / -2)
  U(1, 16 - 3*(8 - 3) ** 2 / 5)
  U(15, -45 / -(8 * (5-4) -3) + (3*2 ** 2)/( 5 -3))
  U(1.25, (3 - 2 + (1 + 2) ** 2) / (5 + (4 - 1)))
  U(375, 360+15%360)
  U(375, 360+15%%360)
  U(15, 375%360)
  U(15, 375%%360)
  U(345, -15%360)
  U(-15, -15%%360)
  
  U(1,      abs(-1))
  U(1,      ceil(.1))
  U(1,      floor(1.9))
  U(3,      floordiv(7,2))
  U(4,      max(3, 4))
  U(3,      min(4, 3))
  U(7.389,  exp(2))
  U(2,      log(exp(2)))
  U(3,      log10(1000))
  U(16,     pow(2, 4))
  U(8,      sqrt(64))
  U(.5,     sin(3.14159*5/6))
  U(-.5,    cos(3.14159*4/6))
  U(1,      tan(3.14159*.25))
  U(0.5236, asin(1/2))
  U(1.0472, acos(1/2))
  U(0.7854, atan(1))
  U(-.7854, atan2(0-2, 2))
  U(1.1752, sinh(1))
  U(1.5431, cosh(1))
  U(0.7616, tanh(1))
  U(135,    todeg(3.14159*.75))
  U(1.0472, torad(60))
  U(36,     sq(6))
  U(true,   !false)
  U(true,   !  (  1 > 3 ||  4  < 3)  )
  U(34,     fib(9))
  U(8,      fib(6))
  U(34,     fib(fib(6)+1))
  
  U(120,    factorial(5))
  U(34,     gcd(102, 68))
  U(128,    weirdmul(8, 16))
  U(28,     binomial(8, 2))
  U(35,     binomial(7, 3))
  U(16,     square(4))
  U(144,    square(12))
  U(8,      cube(2))
  U(125,    cube(5))
EFDEF()

FDEF(square())
  BRANCH(a1 == 0, square.s)
    RET(square(a1-1) + 2 * a1 - 1)
  LABEL(square.s)
    RET(0)
EFDEF()

FDEF(cube())
  BRANCH(a1 == 0, cube.s)
    RET(cube(a1 - 1) + 3 * square(a1) - 3 * a1 + 1)
  LABEL(cube.s)
    RET(0)
EFDEF()

FDEF(binomial())
  BRANCH(a2 == 0, binomial.a)
  BRANCH(a1 == 0, binomial.b)
    RET(binomial(a1-1, a2) + binomial(a1-1, a2-1))
  LABEL(binomial.a)
    RET(1)
  LABEL(binomial.b)
    RET(0)
EFDEF()

FDEF(gcd())
  BRANCH(a2 == 0, gcd.simple)
    RET(gcd(a2, a1 % a2))
  LABEL(gcd.simple)
    RET(a1)
EFDEF()

FDEF(weirdmul())
  BRANCH(a2 == 0, weridmul.a)
  BRANCH(a2 % 2 == 0, weirdmul.b)
    RET(weirdmul(a1 + a1, floordiv(a2, 2)) + a1)
  LABEL(weridmul.a)
    RET(0)
  LABEL(weirdmul.b)
    RET(weirdmul(a1 + a1, floordiv(a2, 2)))
EFDEF()

FDEF(factorial())
  BRANCH(a1 == 1, factorial.easy)
    RET(a1 * factorial(a1 - 1))
  LABEL(factorial.easy)
    RET(1)
EFDEF()

FDEF(addtest())
  RET(a1+a2)
EFDEF()

FDEF(fib())
  BRANCH(a1 <= 1, fib.simple)
    RET(fib(a1-1) + fib(a1-2))
  LABEL(fib.simple)
    RET(a1)
EFDEF()

FDEF(printalias())
  RET(a1)
EFDEF()

FDEF(test())
  RET(2.5)
EFDEF()